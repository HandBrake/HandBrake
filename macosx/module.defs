$(eval $(call import.MODULE.defs,MACOSX,macosx))
$(eval $(call import.GCC,MACOSX))

MACOSX.src/   = $(SRC/)macosx/
MACOSX.build/ = $(BUILD/)macosx/
MACOSX.xroot/ = $(BUILD/)xroot/

MACOSX.m4.in  = $(wildcard $(MACOSX.src/)*.m4)
MACOSX.m4.out = $(MACOSX.m4.in:$(MACOSX.src/)%.m4=$(MACOSX.build/)%)

MACOSX.osl.filelist = $(MACOSX.build/)osl.filelist.txt

###############################################################################

BUILD.out += $(MACOSX.m4.out)
BUILD.out += $(MACOSX.osl.filelist)

###############################################################################

MACOSX.project = -project $(MACOSX.src/)HandBrake.xcodeproj

## configuration: must be one of { release, debug }
ifeq (1,$(SECURITY.sandbox))
   MACOSX.configuration = -configuration $(MACOSX.map.g.$(MACOSX.GCC.g))-sandbox
else
   MACOSX.configuration = -configuration $(MACOSX.map.g.$(MACOSX.GCC.g))
endif

## mapping from symbolic debug value to xcode configuration
MACOSX.map.g.none = release
MACOSX.map.g.min  = debug
MACOSX.map.g.std  = debug
MACOSX.map.g.max  = debug

## mapping from symbolic optimization value to actual level
MACOSX.map.O.none            = 0
MACOSX.map.O.size            = s
MACOSX.map.O.size-aggressive = z
MACOSX.map.O.speed           = 3

## xcconfig: must be one of macosx/xcconfig/*.xcconfig
MACOSX.xcconfig = $(foreach x,$(XCODE.xcconfig),-xcconfig $(MACOSX.src/)xcconfig/$(x))
MACOSX.sdk      = $(foreach sdk,$(GCC.sysroot),-sdk $(sdk))

## extra CFLAGS: macro definitions
MACOSX.extra_cflags = OTHER_CFLAGS='$(MACOSX.GCC.D)'

## launch a build through xcode; which in turn will do a nested make against
## this build system with normal build rules enabled.
##
## $(1) = list of targets
## $(2) = list of goals to shunt through xcodebuild->make
##

MACOSX.XCODE = $(strip \
    $(XCODEBUILD.exe) \
        $(MACOSX.project) \
        $(foreach t,$(1),-target $t) \
        $(MACOSX.configuration) \
        $(MACOSX.xcconfig) \
        \
        SYMROOT='$(XCODE.symroot)' \
        CONFIGURATION_BUILD_DIR='$(XCODE.symroot)' \
        CONFIGURATION_TEMP_DIR='$(XCODE.symroot)' \
        \
        EXTERNAL_BUILD='$(abspath $(BUILD))' \
        EXTERNAL_CONF_ARGS='$(CONF.args)' \
        EXTERNAL_DRIVER='$(XCODE.driver)' \
        EXTERNAL_GOALS='$(3)' \
        EXTERNAL_JOBS='$(MACOSX.JOBS)' \
        EXTERNAL_O='$(MACOSX.map.O.$(MACOSX.GCC.O))' \
        EXTERNAL_VARS='$(-*-command-variables-*-)' \
        \
        $(MACOSX.extra_cflags) \
        \
        $(2) )

MACOSX.SIGN.flags = $(if $(filter 1,$(SECURITY.sandbox)),-sr,-r)
MACOSX.SIGN.id = $(if $(ID),$(ID),-)
MACOSX.SIGN = $(strip $(MACOSX.src/)hbsign $(MACOSX.SIGN.flags) '$(MACOSX.SIGN.id)' $(MACOSX.xroot/)HandBrake.app $(MACOSX.xroot/)HandBrakeCLI)

MACOSX.NOTARIZE = $(strip $(MACOSX.src/)hbnotarize '$(USERNAME)' $(MACOSX.xroot/)HandBrake.app $(MACOSX.xroot/)HandBrakeCLI)

###############################################################################
##
## Universal binary
##
###############################################################################

UB.xcconfigs = osx1011.arm64 osx1011.x86_64
UB.builds    = $(wildcard $(foreach n,$(UB.xcconfigs),$(SRC/)build.$n))
UB.first     = $(word 1,$(UB.xcconfigs))
UB.more      = $(wordlist 2,999,$(UB.xcconfigs))

UB.products/ = $(MACOSX.xroot/)

UB.app/         = HandBrake.app/Contents/
UB.frameworks/  = $(UB.app/)Frameworks/
UB.xpcServices/ = $(UB.app/)XPCServices/

UB.contents = $(UB.app/)MacOS/HandBrake \
              $(UB.frameworks/)HandBrakeKit.framework/Versions/A/HandBrakeKit \
              $(UB.frameworks/)Sparkle.framework/Versions/A/Sparkle \
              $(UB.frameworks/)Sparkle.framework/Versions/A/Resources/Autoupdate \
              $(UB.xpcServices/)HandBrakeXPCService.xpc/Contents/MacOS/HandBrakeXPCService \
              $(UB.xpcServices/)HandBrakeXPCService2.xpc/Contents/MacOS/HandBrakeXPCService2 \
              $(UB.xpcServices/)HandBrakeXPCService3.xpc/Contents/MacOS/HandBrakeXPCService3 \
              $(UB.xpcServices/)HandBrakeXPCService4.xpc/Contents/MacOS/HandBrakeXPCService4 \
              $(UB.xpcServices/)org.sparkle-project.Downloader.xpc/Contents/MacOS/org.sparkle-project.Downloader \
              $(UB.xpcServices/)org.sparkle-project.InstallerConnection.xpc/Contents/MacOS/org.sparkle-project.InstallerConnection \
              $(UB.xpcServices/)org.sparkle-project.InstallerLauncher.xpc/Contents/MacOS/org.sparkle-project.InstallerLauncher \
              $(UB.xpcServices/)org.sparkle-project.InstallerLauncher.xpc/Contents/MacOS/Autoupdate \
              $(UB.xpcServices/)org.sparkle-project.InstallerLauncher.xpc/Contents/MacOS/Updater.app/Contents/MacOS/Updater \
              $(UB.xpcServices/)org.sparkle-project.InstallerStatus.xpc/Contents/MacOS/org.sparkle-project.InstallerStatus

UB.BUILD = $(SRC/)configure --force --build=$(BUILD/)ub.$(1) --xcode-config=$(1) $(CONF.args) --launch

## linefeed is important
define UB.BUILD.item
    $(call UB.BUILD,$(1)) --launch-jobs=0

endef

define UB.BUILD.SERIAL
    $(foreach n,$(UB.xcconfigs),$(call UB.BUILD.item,$n))
endef

define UB.BUILD.lipo
    $(LIPO.exe) $(foreach n,$(UB.xcconfigs),ub.$n/$(UB.products/)$1) -create -output $(UB.products/)$1

endef

define UB.COMBINE
    $(RM.exe) -fr $(UB.products/)
    $(MKDIR.exe) -p $(UB.products/)

    $(CP.exe) ub.$(UB.first)/$(UB.products/)HandBrakeCLI $(UB.products/).
    $(LIPO.exe) $(foreach n,$(UB.xcconfigs),ub.$n/$(UB.products/)HandBrakeCLI) -create -output $(UB.products/)HandBrakeCLI

    $(CP.exe) -R ub.$(UB.first)/$(UB.products/)HandBrake.app $(UB.products/).
    $(foreach n,$(UB.contents),$(call UB.BUILD.lipo,$n))

    @sync
    @echo ""
    @echo "$@: { $(UB.xcconfigs) } combined -> $(UB.products/)HandBrakeCLI"
    @echo "$@: UB executable size: `du -sh $(UB.products/)HandBrakeCLI | awk '{ print $$1 }'`"
    @echo ""
    @echo "$@: { $(UB.xcconfigs) } combined -> $(UB.products/)HandBrake.app"
    @echo "$@: UB executable size: `du -sh $(UB.products/)$(1) | awk '{ print $$1 }'`"
    @echo ""
endef
