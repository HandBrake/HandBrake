include $(SRC/)make/include/base.defs
include $(SRC/)make/include/contrib.defs
include $(SRC/)make/include/function.defs
include $(SRC/)make/include/gcc.defs
include $(SRC/)make/include/target.defs
include $(SRC/)make/include/tool.defs

###############################################################################

ifeq (1,$(FEATURE.local_pkgconfig))
    MODULES += contrib/pkgconfig
endif

HB_TOOLS_PATH =
ifeq (1,$(FEATURE.local_cmake))
    MODULES += contrib/cmake
    HB_TOOLS_PATH = $(call fn.ABSOLUTE,$(CONTRIB.build/)bin)
endif

ifeq (1,$(FEATURE.local_autotools))
    MODULES += contrib/autoconf
    MODULES += contrib/automake
    MODULES += contrib/libtool
    MODULES += contrib/m4
ifneq (1,$(FEATURE.local_pkgconfig))
    MODULES += contrib/pkgconfig
endif
    AUTOTOOL_MODULES = AUTOCONF AUTOMAKE LIBTOOL M4 PKGCONFIG
    HB_TOOLS_PATH = $(call fn.ABSOLUTE,$(CONTRIB.build/)bin)
else
    AUTOTOOL_MODULES =
endif

ifneq (,$(HB_TOOLS_PATH))
    PATH := $(HB_TOOLS_PATH):$(PATH)
endif

ifneq (,$(filter $(BUILD.system),cygwin mingw))
ifneq ($(HAS.bz2),1)
    MODULES += contrib/bzip2
endif
endif

ifneq (,$(filter $(BUILD.system),darwin cygwin mingw))
    MODULES += contrib/freetype
    MODULES += contrib/fribidi
    MODULES += contrib/harfbuzz
    MODULES += contrib/libxml2
    MODULES += contrib/libass
    MODULES += contrib/libogg
    MODULES += contrib/libvorbis
    MODULES += contrib/libopus
    MODULES += contrib/libspeex
    MODULES += contrib/libtheora
    MODULES += contrib/libsamplerate
    MODULES += contrib/lame
    MODULES += contrib/x264
    MODULES += contrib/jansson
endif

ifeq (1,$(FEATURE.flatpak))
    MODULES += contrib/libopus
    MODULES += contrib/lame
    MODULES += contrib/jansson
    MODULES += contrib/x264
    MODULES += contrib/harfbuzz
    MODULES += contrib/fribidi
    MODULES += contrib/freetype
    MODULES += contrib/libass
endif

ifeq (1,$(FEATURE.fdk_aac))
    MODULES += contrib/fdk-aac
endif

ifeq (1,$(FEATURE.x265))
    MODULES += contrib/x265
    MODULES += contrib/x265_8bit
    MODULES += contrib/x265_10bit
    MODULES += contrib/x265_12bit
endif

MODULES += contrib/ffmpeg
MODULES += contrib/libvpx
MODULES += contrib/libdvdread
MODULES += contrib/libdvdnav
MODULES += contrib/libbluray

ifneq (,$(filter $(BUILD.system),mingw))
ifneq ($(HAS.pthread),1)
ifneq ($(HAS.pthreadGC2),1)
    MODULES += contrib/pthreadw32
endif
endif
endif

ifeq (1,$(FEATURE.qsv))
    MODULES += contrib/libmfx
endif

ifeq (1,$(FEATURE.vce))
    MODULES += contrib/amf
endif

ifneq (,$(filter $(BUILD.system),darwin))
    MODULES += contrib/xz
endif

ifneq (,$(filter $(BUILD.system),cygwin mingw))
ifneq ($(HAS.iconv),1)
    MODULES += contrib/libiconv
endif
ifneq ($(HAS.xz),1)
    MODULES += contrib/xz
endif
ifneq ($(HAS.libz),1)
    MODULES += contrib/zlib
endif
ifneq ($(HAS.regex),1)
    MODULES += contrib/libgnurx
endif
endif

ifneq (,$(filter $(BUILD.system),solaris))
    MODULES += contrib/libiconv
endif


## these must come after contrib since some contrib modules are optional
MODULES += libhb

###############################################################################

ifeq (1-darwin,$(FEATURE.xcode)-$(BUILD.system))
    ## use macosx module when xcode+darwin
    MODULES += macosx
else
    ## default is to build CLI
    MODULES += test
endif

ifeq (1-mingw,$(FEATURE.gtk.mingw)-$(BUILD.system))
    MODULES += gtk
endif

ifeq (1-linux,$(FEATURE.gtk)-$(BUILD.system))
    ## build gtk when gtk+linux
    MODULES += gtk
endif

ifeq (1-freebsd,$(FEATURE.gtk)-$(BUILD.system))
    ## build gtk when gtk+freebsd
    MODULES += gtk
endif

ifeq (1-kfreebsd,$(FEATURE.gtk)-$(BUILD.system))
    ## build gtk when gtk+kfreebsd
    MODULES += gtk
endif

ifeq (1-gnu,$(FEATURE.gtk)-$(BUILD.system))
    ## build gtk when gtk+gnu
    MODULES += gtk
endif

###############################################################################

MODULES += pkg

###############################################################################

include $(MODULES:%=$(SRC/)%/module.defs)
include $(SRC/)make/variant/$(BUILD.system).defs
-include $(SRC/)make/variant/$(BUILD.system).$(BUILD.machine).defs
