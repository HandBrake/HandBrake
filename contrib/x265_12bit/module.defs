__deps__ := X265_8
$(eval $(call import.MODULE.defs,X265_12,x265_12,$(__deps__),x265))
$(eval $(call import.CONTRIB.defs,X265_12))

X265_12.FETCH.url     = https://github.com/HandBrake/HandBrake-contribs/releases/download/contribs2/x265_4.0.tar.gz
X265_12.FETCH.url    += https://bitbucket.org/multicoreware/x265_git/downloads/x265_4.0.tar.gz
X265_12.FETCH.sha256  = 75b4d05629e365913de3100b38a459b04e2a217a8f30efaa91b572d8e6d71282

# Silence "warning: overriding recipe for target" messages
X265_12.FETCH.target =

X265_12.build_dir             = 12bit
X265_12.CONFIGURE.exe         = cmake
X265_12.CONFIGURE.args.prefix = -DCMAKE_INSTALL_PREFIX="$(X265_12.CONFIGURE.prefix)"
X265_12.CONFIGURE.args.host   = -DCMAKE_HOST_SYSTEM="$(X265_12.CONFIGURE.build)"
X265_12.CONFIGURE.deps        =
X265_12.CONFIGURE.static      =
X265_12.CONFIGURE.shared      = -DENABLE_SHARED=OFF
X265_12.CONFIGURE.extra       = -DENABLE_CLI=OFF -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF -DMAIN12=ON -DCMAKE_ASM_NASM_FLAGS=-w-macro-params-legacy

ifneq (1,$(FEATURE.numa))
    X265_12.CONFIGURE.extra  += -DENABLE_LIBNUMA=OFF
endif

ifeq (size-aggressive,$(GCC.O))
    X265_12.CONFIGURE.extra += -DCMAKE_CXX_FLAGS_MINSIZEREL="-Oz -DNDEBUG" -DCMAKE_C_FLAGS_MINSIZEREL="-Oz -DNDEBUG"
endif

ifeq (darwin,$(HOST.system))
    X265_12.CONFIGURE.extra += -DCMAKE_OSX_ARCHITECTURES=$(HOST.machine)
endif

ifeq ($(GCC.O),$(filter $(GCC.O),size size-aggressive))
    X265_12.CONFIGURE.extra += -DCMAKE_BUILD_TYPE=MinSizeRel
else
    ifneq (none,$(X265_12.GCC.g))
        X265_12.CONFIGURE.extra += -DCMAKE_BUILD_TYPE=Debug
    else
        X265_12.CONFIGURE.extra += -DCMAKE_BUILD_TYPE=Release
    endif
endif

ifeq (on,$(GCC.lto))
    X265_12.CONFIGURE.extra += -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=TRUE
else ifeq (thin,$(GCC.lto))
    X265_12.CONFIGURE.extra += -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=TRUE -DCMAKE_LTO_THIN=TRUE
else ifeq (off,$(GCC.lto))
    X265_12.CONFIGURE.extra += -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=FALSE
endif

ifeq (1,$(HOST.cross))
    ifeq (mingw,$(HOST.system))
        X265_12.CONFIGURE.extra += -DWIN32=ON
        X265_12.CONFIGURE.extra += -DCMAKE_SYSTEM_NAME=Windows
        X265_12.CONFIGURE.extra += -DCMAKE_C_COMPILER=$(X265_12.GCC.gcc)
        X265_12.CONFIGURE.extra += -DCMAKE_CXX_COMPILER=$(X265_12.GCC.gxx)
        X265_12.CONFIGURE.extra += -DCMAKE_RC_COMPILER=$(HOST.cross.prefix)windres
        X265_12.CONFIGURE.args.host  = -DCMAKE_HOST_SYSTEM="$(X265_12.CONFIGURE.host)"
    endif
    ifeq (aarch64,$(HOST.machine:arm64=aarch64))
        X265_12.CONFIGURE.extra += -DCROSS_COMPILE_ARM64=ON -DCROSS_COMPILE_NEON_DOTPROD=ON -DCROSS_COMPILE_NEON_I8MM=ON
    endif
    X265_12.CONFIGURE.args.build = -DCMAKE_SYSTEM_PROCESSOR=$(HOST.machine)
else
    ifeq (arm64-darwin,$(HOST.machine)-$(HOST.system))
        X265_12.CONFIGURE.extra += -DCPU_HAS_NEON_I8MM=ON
    endif
endif

## find CMakeLists.txt
X265_12.CONFIGURE.extra += "$(call fn.ABSOLUTE,$(X265_12.EXTRACT.dir/)source/)"

X265_12.INSTALL.make = $(MV.exe)
X265_12.INSTALL.args.dir = cd $(1);
X265_12.INSTALL.extra = libx265.a libx265_main12.a
X265_12.INSTALL.args = @dir !make !extra

# Override operations that are not needed
X265_12.FETCH =
X265_12.VERIFY = $(TOUCH.exe) $@
X265_12.EXTRACT = $(TOUCH.exe) $@
X265_12.PATCH = $(TOUCH.exe) $@
X265_12.XCLEAN =
