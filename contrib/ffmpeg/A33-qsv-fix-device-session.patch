diff --git a/libavcodec/qsv.c b/libavcodec/qsv.c
index 7432b2f..7abb8da 100644
--- a/libavcodec/qsv.c
+++ b/libavcodec/qsv.c
@@ -47,6 +47,12 @@
 #include <mfxplugin.h>
 #endif
 
+#if QSV_ONEVPL
+#include <mfxdispatcher.h>
+#else
+#define MFXUnload(a) do { } while(0)
+#endif
+
 int ff_qsv_codec_id_to_mfx(enum AVCodecID codec_id)
 {
     switch (codec_id) {
@@ -406,7 +412,7 @@ static int qsv_create_mfx_session(AVCodecContext *avctx,
                                   mfxVersion *pver,
                                   int gpu_copy,
                                   mfxSession *psession,
-                                  mfxLoader *ploader)
+                                  void **ploader)
 {
     mfxStatus sts;
     mfxLoader loader = NULL;
@@ -420,7 +426,7 @@ static int qsv_create_mfx_session(AVCodecContext *avctx,
     /* Don't create a new MFX loader if the input loader is valid */
     if (*ploader == NULL) {
         av_log(avctx, AV_LOG_VERBOSE,
-               "Use the Intel oneVPL SDK to create MFX session, the required "
+               "Use Intel(R) oneVPL to create MFX session, the required "
                "implementation version is %d.%d\n",
                pver->Major, pver->Minor);
 
@@ -464,7 +470,7 @@ static int qsv_create_mfx_session(AVCodecContext *avctx,
         }
     } else {
         av_log(avctx, AV_LOG_VERBOSE,
-               "Use the Intel oneVPL SDK to create MFX session with the specified MFX loader\n");
+               "Use Intel(R) oneVPL to create MFX session with the specified MFX loader\n");
 
         loader = *ploader;
     }
@@ -480,7 +486,7 @@ static int qsv_create_mfx_session(AVCodecContext *avctx,
         /* Failed to find an available implementation */
         if (sts == MFX_ERR_NOT_FOUND)
             break;
-        else if (sts < 0) {
+        else if (sts != MFX_ERR_NONE) {
             impl_idx++;
             continue;
         }
@@ -520,14 +526,14 @@ static int qsv_create_mfx_session(AVCodecContext *avctx,
                                   mfxVersion *pver,
                                   int gpu_copy,
                                   mfxSession *psession,
-                                  mfxLoader *ploader)
+                                  void **ploader)
 {
     mfxInitParam init_par = { MFX_IMPL_AUTO_ANY };
     mfxSession session = NULL;
     mfxStatus sts;
 
     av_log(avctx, AV_LOG_VERBOSE,
-           "Use the Intel Media SDK to create MFX session, the required "
+           "Use Intel(R) Media SDK to create MFX session, the required "
            "implementation version is %d.%d\n",
            pver->Major, pver->Minor);
 
@@ -557,6 +563,7 @@ static int qsv_create_mfx_session(AVCodecContext *avctx,
 
 #endif
 
+
 int ff_qsv_init_internal_session(AVCodecContext *avctx, QSVSession *qs,
                                  const char *load_plugins, int gpu_copy)
 {
@@ -873,7 +880,7 @@ int ff_qsv_init_session_device(AVCodecContext *avctx, mfxSession *psession,
     AVHWDeviceContext    *device_ctx = (AVHWDeviceContext*)device_ref->data;
     AVQSVDeviceContext *device_hwctx = device_ctx->hwctx;
     mfxSession        parent_session = device_hwctx->session;
-    mfxLoader                 loader = device_hwctx->loader;
+    void                     *loader = device_hwctx->loader;
     mfxHDL                    handle = NULL;
     int          hw_handle_supported = 0;
 
diff --git a/libavcodec/qsv_internal.h b/libavcodec/qsv_internal.h
index 762ac37..e6f23b5 100644
--- a/libavcodec/qsv_internal.h
+++ b/libavcodec/qsv_internal.h
@@ -87,7 +87,7 @@ typedef struct QSVFrame {
 
 typedef struct QSVSession {
     mfxSession session;
-    mfxLoader loader;
+    void *loader;
 #ifdef AVCODEC_QSV_LINUX_SESSION_HANDLE
     AVBufferRef *va_device_ref;
     AVHWDeviceContext *va_device_ctx;
diff --git a/libavcodec/qsvdec.c b/libavcodec/qsvdec.c
index 92fa922..c22b426 100644
--- a/libavcodec/qsvdec.c
+++ b/libavcodec/qsvdec.c
@@ -46,6 +46,12 @@
 #include "qsv.h"
 #include "qsv_internal.h"
 
+#if QSV_ONEVPL
+#include <mfxdispatcher.h>
+#else
+#define MFXUnload(a) do { } while(0)
+#endif
+
 typedef struct QSVContext {
     // the session used for decoding
     mfxSession session;
diff --git a/libavfilter/qsvvpp.c b/libavfilter/qsvvpp.c
index 503e82e..1812aeb 100644
--- a/libavfilter/qsvvpp.c
+++ b/libavfilter/qsvvpp.c
@@ -30,6 +30,12 @@
 #include "qsvvpp.h"
 #include "video.h"
 
+#if QSV_ONEVPL
+#include <mfxdispatcher.h>
+#else
+#define MFXUnload(a) do { } while(0)
+#endif
+
 #define IS_VIDEO_MEMORY(mode)  (mode & (MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET | \
                                         MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET))
 #if QSV_HAVE_OPAQUE
@@ -886,7 +892,7 @@ int ff_qsvvpp_filter_frame(QSVVPPContext *s, AVFilterLink *inlink, AVFrame *picr
 #if QSV_ONEVPL
 
 int ff_qsvvpp_create_mfx_session(void *ctx,
-                                 mfxLoader loader,
+                                 void *loader,
                                  mfxIMPL implementation,
                                  mfxVersion *pver,
                                  mfxSession *psession)
@@ -896,7 +902,7 @@ int ff_qsvvpp_create_mfx_session(void *ctx,
     uint32_t impl_idx = 0;
 
     av_log(ctx, AV_LOG_VERBOSE,
-           "Use the Intel oneVPL SDK to create MFX session with the specified MFX loader\n");
+           "Use Intel(R) oneVPL to create MFX session with the specified MFX loader\n");
 
     if (!loader) {
         av_log(ctx, AV_LOG_ERROR, "Invalid MFX Loader handle\n");
@@ -945,7 +951,7 @@ int ff_qsvvpp_create_mfx_session(void *ctx,
 #else
 
 int ff_qsvvpp_create_mfx_session(void *ctx,
-                                 mfxLoader loader,
+                                 void *loader,
                                  mfxIMPL implementation,
                                  mfxVersion *pver,
                                  mfxSession *psession)
@@ -954,7 +960,7 @@ int ff_qsvvpp_create_mfx_session(void *ctx,
     mfxStatus sts;
 
     av_log(ctx, AV_LOG_VERBOSE,
-           "Use the Intel Media SDK to create MFX session, API version is "
+           "Use Intel(R) Media SDK to create MFX session, API version is "
            "%d.%d, the required implementation version is %d.%d\n",
            MFX_VERSION_MAJOR, MFX_VERSION_MINOR, pver->Major, pver->Minor);
 
@@ -974,4 +980,4 @@ int ff_qsvvpp_create_mfx_session(void *ctx,
     return 0;
 }
 
-#endif
+#endif
\ No newline at end of file
diff --git a/libavfilter/qsvvpp.h b/libavfilter/qsvvpp.h
index bebbbfe..7c1a231 100644
--- a/libavfilter/qsvvpp.h
+++ b/libavfilter/qsvvpp.h
@@ -85,7 +85,7 @@ int ff_qsvvpp_print_error(void *log_ctx, mfxStatus err,
 int ff_qsvvpp_print_warning(void *log_ctx, mfxStatus err,
                             const char *warning_string);
 
-int ff_qsvvpp_create_mfx_session(void *ctx, mfxLoader loader, mfxIMPL implementation,
+int ff_qsvvpp_create_mfx_session(void *ctx, void *loader, mfxIMPL implementation,
                                  mfxVersion *pver, mfxSession *psession);
 
 #endif /* AVFILTER_QSVVPP_H */
diff --git a/libavutil/hwcontext_d3d11va.c b/libavutil/hwcontext_d3d11va.c
index b4b39a0..763849c 100644
--- a/libavutil/hwcontext_d3d11va.c
+++ b/libavutil/hwcontext_d3d11va.c
@@ -527,6 +527,13 @@ static void d3d11va_device_uninit(AVHWDeviceContext *hwdev)
     }
 }
 
+static void d3d11va_device_free(AVHWDeviceContext *ctx)
+{
+    AVD3D11VADeviceContext *hwctx = ctx->hwctx;
+
+    av_free(hwctx->device_name);
+}
+
 static int d3d11va_device_create(AVHWDeviceContext *ctx, const char *device,
                                  AVDictionary *opts, int flags)
 {
@@ -542,6 +549,8 @@ static int d3d11va_device_create(AVHWDeviceContext *ctx, const char *device,
     int is_debug       = !!av_dict_get(opts, "debug", NULL, 0);
     int ret;
 
+    ctx->free = d3d11va_device_free;
+
     // (On UWP we can't check this.)
 #if !HAVE_UWP
     if (!LoadLibrary("d3d11_1sdklayers.dll"))
@@ -598,6 +607,10 @@ static int d3d11va_device_create(AVHWDeviceContext *ctx, const char *device,
                 pAdapter = NULL;
             }
             IDXGIFactory2_Release(pDXGIFactory);
+
+            device_hwctx->device_name = av_strdup(device);
+            if (!device_hwctx->device_name)
+                return AVERROR(ENOMEM);
         }
     }
 
diff --git a/libavutil/hwcontext_d3d11va.h b/libavutil/hwcontext_d3d11va.h
index 93978e8..0b8f3b4 100644
--- a/libavutil/hwcontext_d3d11va.h
+++ b/libavutil/hwcontext_d3d11va.h
@@ -94,6 +94,11 @@ typedef struct AVD3D11VADeviceContext {
     void (*lock)(void *lock_ctx);
     void (*unlock)(void *lock_ctx);
     void *lock_ctx;
+
+    /**
+     * The string for the used adapter
+     */
+    char *device_name;
 } AVD3D11VADeviceContext;
 
 /**
diff --git a/libavutil/hwcontext_dxva2.c b/libavutil/hwcontext_dxva2.c
index 33b3dc8..61c2484 100644
--- a/libavutil/hwcontext_dxva2.c
+++ b/libavutil/hwcontext_dxva2.c
@@ -430,6 +430,7 @@ static void dxva2_device_free(AVHWDeviceContext *ctx)
         dlclose(priv->dxva2lib);
 
     av_freep(&ctx->user_opaque);
+    av_free(hwctx->device_name);
 }
 
 static int dxva2_device_create9(AVHWDeviceContext *ctx, UINT adapter)
@@ -570,6 +571,13 @@ static int dxva2_device_create(AVHWDeviceContext *ctx, const char *device,
         return AVERROR_UNKNOWN;
     }
 
+    if (device) {
+        hwctx->device_name = av_strdup(device);
+
+        if (!hwctx->device_name)
+            return AVERROR(ENOMEM);
+    }
+
     return 0;
 }
 
diff --git a/libavutil/hwcontext_dxva2.h b/libavutil/hwcontext_dxva2.h
index e1b79bc..253ddbe 100644
--- a/libavutil/hwcontext_dxva2.h
+++ b/libavutil/hwcontext_dxva2.h
@@ -38,6 +38,10 @@
  */
 typedef struct AVDXVA2DeviceContext {
     IDirect3DDeviceManager9 *devmgr;
+    /**
+     * The string for the used adapter
+     */
+    char *device_name;
 } AVDXVA2DeviceContext;
 
 /**
diff --git a/libavutil/hwcontext_qsv.c b/libavutil/hwcontext_qsv.c
index afddebc..9eb6a70 100644
--- a/libavutil/hwcontext_qsv.c
+++ b/libavutil/hwcontext_qsv.c
@@ -56,6 +56,12 @@
 #define QSV_ONEVPL       QSV_VERSION_ATLEAST(2, 0)
 #define QSV_HAVE_OPAQUE  !QSV_ONEVPL
 
+#if QSV_ONEVPL
+#include <mfxdispatcher.h>
+#else
+#define MFXUnload(a) do { } while(0)
+#endif
+
 typedef struct QSVDevicePriv {
     AVBufferRef *child_device_ctx;
 } QSVDevicePriv;
@@ -68,14 +74,15 @@ typedef struct QSVDeviceContext {
 
     enum AVHWDeviceType child_device_type;
     enum AVPixelFormat  child_pix_fmt;
+    char               *child_device;
 } QSVDeviceContext;
 
 typedef struct QSVFramesContext {
     mfxSession session_download;
-    mfxLoader loader_download;
+    void *loader_download;
     int session_download_init;
     mfxSession session_upload;
-    mfxLoader loader_upload;
+    void *loader_upload;
     int session_upload_init;
 #if HAVE_PTHREADS
     pthread_mutex_t session_lock;
@@ -547,10 +554,12 @@ static mfxStatus frame_get_hdl(mfxHDL pthis, mfxMemId mid, mfxHDL *hdl)
 #if QSV_ONEVPL
 
 static int qsv_create_mfx_session(void *ctx,
+                                  mfxHandleType handle_type,
                                   mfxIMPL implementation,
+                                  char *child_device,
                                   mfxVersion *pver,
                                   mfxSession *psession,
-                                  mfxLoader *ploader)
+                                  void **ploader)
 {
     mfxStatus sts;
     mfxLoader loader = NULL;
@@ -561,10 +570,18 @@ static int qsv_create_mfx_session(void *ctx,
     uint32_t impl_idx = 0;
 
     av_log(ctx, AV_LOG_VERBOSE,
-           "Use the Intel oneVPL SDK to create MFX session, API version is "
+           "Use Intel(R) oneVPL to create MFX session, API version is "
            "%d.%d, the required implementation version is %d.%d\n",
            MFX_VERSION_MAJOR, MFX_VERSION_MINOR, pver->Major, pver->Minor);
 
+    if (handle_type != MFX_HANDLE_VA_DISPLAY &&
+        handle_type != MFX_HANDLE_D3D9_DEVICE_MANAGER &&
+        handle_type != MFX_HANDLE_D3D11_DEVICE) {
+        av_log(ctx, AV_LOG_ERROR,
+               "Invalid MFX device handle\n");
+        return AVERROR(EXDEV);
+    }
+
     *psession = NULL;
     *ploader = NULL;
     loader = MFXLoad();
@@ -594,29 +611,37 @@ static int qsv_create_mfx_session(void *ctx,
         goto fail;
     }
 
-    if (MFX_IMPL_VIA_D3D11 == MFX_IMPL_VIA_MASK(implementation))
-    {
-        impl_value.Type = MFX_VARIANT_TYPE_U32;
+    impl_value.Type = MFX_VARIANT_TYPE_U32;
+
+    if (MFX_HANDLE_VA_DISPLAY == handle_type)
+        impl_value.Data.U32 = MFX_ACCEL_MODE_VIA_VAAPI;
+    else if (MFX_HANDLE_D3D9_DEVICE_MANAGER == handle_type)
+        impl_value.Data.U32 = MFX_ACCEL_MODE_VIA_D3D9;
+    else
         impl_value.Data.U32 = MFX_ACCEL_MODE_VIA_D3D11;
-        sts = MFXSetConfigFilterProperty(cfg,
-                                        (const mfxU8 *)"mfxImplDescription.AccelerationMode", impl_value);
 
-        if (sts != MFX_ERR_NONE) {
-            av_log(ctx, AV_LOG_ERROR, "Error adding a MFX configuration"
-                "MFX_ACCEL_MODE_VIA_D3D11 property: %d.\n", sts);
-            goto fail;
-        }
+    sts = MFXSetConfigFilterProperty(cfg,
+                                     (const mfxU8 *)"mfxImplDescription.AccelerationMode", impl_value);
+
+    if (sts != MFX_ERR_NONE) {
+        av_log(ctx, AV_LOG_ERROR, "Error adding a MFX configuration"
+               "MFX_ACCEL_MODE_VIA_D3D9 property: %d.\n", sts);
+        goto fail;
     }
-    else if (MFX_IMPL_VIA_D3D9 == MFX_IMPL_VIA_MASK(implementation))
-    {
+
+    if (child_device &&
+        (MFX_HANDLE_D3D9_DEVICE_MANAGER == handle_type ||
+         MFX_HANDLE_D3D11_DEVICE == handle_type)) {
+        uint32_t idx = atoi(child_device);
+
         impl_value.Type = MFX_VARIANT_TYPE_U32;
-        impl_value.Data.U32 = MFX_ACCEL_MODE_VIA_D3D9;
+        impl_value.Data.U32 = idx;
         sts = MFXSetConfigFilterProperty(cfg,
-                                        (const mfxU8 *)"mfxImplDescription.AccelerationMode", impl_value);
+                                         (const mfxU8 *)"mfxImplDescription.VendorImplID", impl_value);
 
         if (sts != MFX_ERR_NONE) {
             av_log(ctx, AV_LOG_ERROR, "Error adding a MFX configuration"
-                "MFX_ACCEL_MODE_VIA_D3D9 property: %d.\n", sts);
+                   "VendorImplID property: %d.\n", sts);
             goto fail;
         }
     }
@@ -690,20 +715,30 @@ fail:
 #else
 
 static int qsv_create_mfx_session(void *ctx,
+                                  mfxHandleType handle_type,
                                   mfxIMPL implementation,
+                                  char *child_device,
                                   mfxVersion *pver,
                                   mfxSession *psession,
-                                  mfxLoader *ploader)
+                                  void **ploader)
 {
     mfxVersion ver;
     mfxStatus sts;
     mfxSession session = NULL;
 
     av_log(ctx, AV_LOG_VERBOSE,
-           "Use the Intel Media SDK to create MFX session, API version is "
+           "Use Intel(R) Media SDK to create MFX session, API version is "
            "%d.%d, the required implementation version is %d.%d\n",
            MFX_VERSION_MAJOR, MFX_VERSION_MINOR, pver->Major, pver->Minor);
 
+    if (handle_type != MFX_HANDLE_VA_DISPLAY &&
+        handle_type != MFX_HANDLE_D3D9_DEVICE_MANAGER &&
+        handle_type != MFX_HANDLE_D3D11_DEVICE) {
+        av_log(ctx, AV_LOG_ERROR,
+               "Invalid MFX device handle\n");
+        return AVERROR(EXDEV);
+    }
+
     *ploader = NULL;
     *psession = NULL;
     ver = *pver;
@@ -748,8 +783,9 @@ fail:
 
 #endif
 
+
 static int qsv_init_internal_session(AVHWFramesContext *ctx,
-                                     mfxSession *session, mfxLoader *loader,
+                                     mfxSession *session, void **loader,
                                      int upload)
 {
     AVQSVFramesContext *frames_hwctx = ctx->hwctx;
@@ -774,8 +810,10 @@ static int qsv_init_internal_session(AVHWFramesContext *ctx,
     opaque = !!(frames_hwctx->frame_type & MFX_MEMTYPE_OPAQUE_FRAME);
 #endif
 
-    ret = qsv_create_mfx_session(ctx, device_priv->impl, &device_priv->ver,
-                                 session, loader);
+    ret = qsv_create_mfx_session(ctx, device_priv->handle_type,
+                                 device_priv->impl, device_priv->child_device,
+                                 &device_priv->ver, session,
+                                 loader);
 
     if (ret)
         goto fail;
@@ -1548,6 +1586,9 @@ static void qsv_device_free(AVHWDeviceContext *ctx)
 {
     AVQSVDeviceContext *hwctx = ctx->hwctx;
     QSVDevicePriv       *priv = ctx->user_opaque;
+    QSVDeviceContext *device_priv = ctx->internal->priv;
+
+    av_free(device_priv->child_device);
 
     if (hwctx->session)
         MFXClose(hwctx->session);
@@ -1599,6 +1640,7 @@ static int qsv_device_derive_from_child(AVHWDeviceContext *ctx,
                                         int flags)
 {
     AVQSVDeviceContext *hwctx = ctx->hwctx;
+    char *child_device = NULL;
 
     mfxVersion    ver = { { 3, 1 } };
     mfxHDL        handle;
@@ -1613,6 +1655,7 @@ static int qsv_device_derive_from_child(AVHWDeviceContext *ctx,
             AVVAAPIDeviceContext *child_device_hwctx = child_device_ctx->hwctx;
             handle_type = MFX_HANDLE_VA_DISPLAY;
             handle = (mfxHDL)child_device_hwctx->display;
+            child_device = child_device_hwctx->device_name;
         }
         break;
 #endif
@@ -1622,6 +1665,7 @@ static int qsv_device_derive_from_child(AVHWDeviceContext *ctx,
             AVD3D11VADeviceContext *child_device_hwctx = child_device_ctx->hwctx;
             handle_type = MFX_HANDLE_D3D11_DEVICE;
             handle = (mfxHDL)child_device_hwctx->device;
+            child_device = child_device_hwctx->device_name;
         }
         break;
 #endif
@@ -1631,6 +1675,7 @@ static int qsv_device_derive_from_child(AVHWDeviceContext *ctx,
             AVDXVA2DeviceContext *child_device_hwctx = child_device_ctx->hwctx;
             handle_type = MFX_HANDLE_D3D9_DEVICE_MANAGER;
             handle = (mfxHDL)child_device_hwctx->devmgr;
+            child_device = child_device_hwctx->device_name;
         }
         break;
 #endif
@@ -1639,8 +1684,9 @@ static int qsv_device_derive_from_child(AVHWDeviceContext *ctx,
         goto fail;
     }
 
-    ret = qsv_create_mfx_session(ctx, implementation, &ver, &hwctx->session,
-                                 &hwctx->loader);
+    ret = qsv_create_mfx_session(ctx, handle_type, implementation, child_device,
+                                 &ver, &hwctx->session, &hwctx->loader);
+
     if (ret)
         goto fail;
 
@@ -1684,6 +1730,7 @@ static int qsv_device_create(AVHWDeviceContext *ctx, const char *device,
     AVHWDeviceContext *child_device;
     AVDictionary *child_device_opts;
     AVDictionaryEntry *e;
+    QSVDeviceContext *device_priv;
 
     mfxIMPL impl;
     int ret;
@@ -1758,7 +1805,17 @@ static int qsv_device_create(AVHWDeviceContext *ctx, const char *device,
         break;
     }
 
+    device_priv = ctx->internal->priv;
+    device_priv->child_device = NULL;
     e = av_dict_get(opts, "child_device", NULL, 0);
+
+    if (e) {
+        device_priv->child_device = av_strdup(e->value);
+
+        if (!device_priv->child_device)
+            return AVERROR(ENOMEM);
+    }
+
     ret = av_hwdevice_ctx_create(&priv->child_device_ctx, child_device_type,
                                  e ? e->value : NULL, child_device_opts, 0);
 
diff --git a/libavutil/hwcontext_vaapi.c b/libavutil/hwcontext_vaapi.c
index 4b81bd1..883d7c2 100644
--- a/libavutil/hwcontext_vaapi.c
+++ b/libavutil/hwcontext_vaapi.c
@@ -1446,6 +1446,7 @@ static void vaapi_device_free(AVHWDeviceContext *ctx)
     if (priv->drm_fd >= 0)
         close(priv->drm_fd);
 
+    av_free(hwctx->device_name);
     av_freep(&priv);
 }
 
@@ -1494,6 +1495,7 @@ static int vaapi_device_connect(AVHWDeviceContext *ctx,
 static int vaapi_device_create(AVHWDeviceContext *ctx, const char *device,
                                AVDictionary *opts, int flags)
 {
+    AVVAAPIDeviceContext *hwctx = ctx->hwctx;
     VAAPIDevicePriv *priv;
     VADisplay display = NULL;
     const AVDictionaryEntry *ent;
@@ -1539,6 +1541,11 @@ static int vaapi_device_create(AVHWDeviceContext *ctx, const char *device,
                        "DRM device node.\n", device);
                 break;
             }
+
+            hwctx->device_name = av_strdup(device);
+
+            if (!hwctx->device_name)
+                return AVERROR(ENOMEM);
         } else {
             char path[64];
             int n, max_devices = 8;
@@ -1579,6 +1586,12 @@ static int vaapi_device_create(AVHWDeviceContext *ctx, const char *device,
                     av_log(ctx, AV_LOG_VERBOSE, "Trying to use "
                            "DRM render node for device %d.\n", n);
                 }
+
+                hwctx->device_name = av_strdup(path);
+
+                if (!hwctx->device_name)
+                    return AVERROR(ENOMEM);
+
                 break;
             }
             if (n >= max_devices)
diff --git a/libavutil/hwcontext_vaapi.h b/libavutil/hwcontext_vaapi.h
index 0b2e071..3e0b54f 100644
--- a/libavutil/hwcontext_vaapi.h
+++ b/libavutil/hwcontext_vaapi.h
@@ -78,6 +78,10 @@ typedef struct AVVAAPIDeviceContext {
      * operations using VAAPI with the same VADisplay.
      */
     unsigned int driver_quirks;
+    /**
+     * The string for the used device
+     */
+    char *device_name;
 } AVVAAPIDeviceContext;
 
 /**
