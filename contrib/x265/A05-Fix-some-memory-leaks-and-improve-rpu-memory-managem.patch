From 762c8f336328463f55ef23ff1c14420fae4bcc96 Mon Sep 17 00:00:00 2001
From: Damiano Galassi <damiog@gmail.com>
Date: Thu, 22 Aug 2024 07:58:48 +0200
Subject: [PATCH 5/6] Fix some memory leaks and improve rpu memory management

---
 source/common/frame.cpp        |  5 +++
 source/common/param.cpp        | 65 ++++++++++++++++++++--------------
 source/encoder/api.cpp         |  3 +-
 source/encoder/encoder.cpp     | 27 +++++++-------
 source/encoder/framefilter.cpp |  7 ++--
 source/encoder/slicetype.cpp   |  6 ++++
 6 files changed, 66 insertions(+), 47 deletions(-)

diff --git a/source/common/frame.cpp b/source/common/frame.cpp
index 4c800e94e..2b9c6aab1 100644
--- a/source/common/frame.cpp
+++ b/source/common/frame.cpp
@@ -348,6 +348,11 @@ void Frame::destroy()
         delete[] m_userSEI.payloads;
     }
 
+    if (m_rpu.payloadSize)
+    {
+        delete[] m_rpu.payload;
+    }
+
     if (m_ctuInfo)
     {
         uint32_t widthInCU = (m_param->sourceWidth + m_param->maxCUSize - 1) >> m_param->maxLog2CUSize;
diff --git a/source/common/param.cpp b/source/common/param.cpp
index 68f7f84fe..6a2b793a0 100755
--- a/source/common/param.cpp
+++ b/source/common/param.cpp
@@ -102,6 +102,19 @@ x265_param *x265_param_alloc()
 
 void x265_param_free(x265_param* p)
 {
+    /* release string arguments that were strdup'd */
+    free((char*)p->rc.lambdaFileName);
+    free((char*)p->rc.statFileName);
+    free((char*)p->rc.sharedMemName);
+    free((char*)p->analysisReuseFileName);
+    free((char*)p->scalingLists);
+    free((char*)p->csvfn);
+    free((char*)p->numaPools);
+    free((char*)p->masteringDisplayColorVolume);
+    free((char*)p->toneMapFile);
+    free((char*)p->analysisSave);
+    free((char*)p->analysisLoad);
+    free((char*)p->videoSignalTypePreset);
     x265_zone_free(p);
 #ifdef SVT_HEVC
      x265_free(p->svtHevcParam);
@@ -2636,13 +2649,25 @@ bool parseMaskingStrength(x265_param* p, const char* value)
     return bError;
 }
 
+void copy_str(const char **dst, const char *src)
+{
+    if (*dst)
+    {
+        free((void *)*dst);
+        *dst = NULL;
+    }
+    if (src)
+    {
+        *dst = strdup(src);
+    }
+}
+
 void x265_copy_params(x265_param* dst, x265_param* src)
 {
     dst->mcstfFrameRange = src->mcstfFrameRange;
     dst->cpuid = src->cpuid;
     dst->frameNumThreads = src->frameNumThreads;
-    if (src->numaPools) dst->numaPools = strdup(src->numaPools);
-    else dst->numaPools = NULL;
+    copy_str(&dst->numaPools, src->numaPools);
 
     dst->bEnableWavefront = src->bEnableWavefront;
     dst->bDistributeModeAnalysis = src->bDistributeModeAnalysis;
@@ -2652,8 +2677,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->bEnableSsim = src->bEnableSsim;
     dst->logLevel = src->logLevel;
     dst->csvLogLevel = src->csvLogLevel;
-    if (src->csvfn) dst->csvfn = strdup(src->csvfn);
-    else dst->csvfn = NULL;
+    copy_str(&dst->csvfn, src->csvfn);
     dst->internalBitDepth = src->internalBitDepth;
     dst->sourceBitDepth = src->sourceBitDepth;
     dst->internalCsp = src->internalCsp;
@@ -2703,8 +2727,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->bEnableTransformSkip = src->bEnableTransformSkip;
     dst->noiseReductionInter = src->noiseReductionInter;
     dst->noiseReductionIntra = src->noiseReductionIntra;
-    if (src->scalingLists) dst->scalingLists = strdup(src->scalingLists);
-    else dst->scalingLists = NULL;
+    copy_str(&dst->scalingLists, src->scalingLists);
     dst->bEnableStrongIntraSmoothing = src->bEnableStrongIntraSmoothing;
     dst->bEnableConstrainedIntra = src->bEnableConstrainedIntra;
     dst->maxNumMergeCand = src->maxNumMergeCand;
@@ -2746,8 +2769,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->psyRdoq = src->psyRdoq;
     dst->bEnableRdRefine = src->bEnableRdRefine;
     dst->analysisReuseMode = src->analysisReuseMode;
-    if (src->analysisReuseFileName) dst->analysisReuseFileName=strdup(src->analysisReuseFileName);
-    else dst->analysisReuseFileName = NULL;
+    copy_str(&dst->analysisReuseFileName, src->analysisReuseFileName);
     dst->bLossless = src->bLossless;
     dst->cbQpOffset = src->cbQpOffset;
     dst->crQpOffset = src->crQpOffset;
@@ -2776,10 +2798,8 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->rc.bStatWrite = src->rc.bStatWrite;
     dst->rc.bStatRead = src->rc.bStatRead;
     dst->rc.dataShareMode = src->rc.dataShareMode;
-    if (src->rc.statFileName) dst->rc.statFileName=strdup(src->rc.statFileName);
-    else dst->rc.statFileName = NULL;
-    if (src->rc.sharedMemName) dst->rc.sharedMemName = strdup(src->rc.sharedMemName);
-    else dst->rc.sharedMemName = NULL;
+    copy_str(&dst->rc.statFileName, src->rc.statFileName);
+    copy_str(&dst->rc.sharedMemName, src->rc.sharedMemName);
     dst->rc.qblur = src->rc.qblur;
     dst->rc.complexityBlur = src->rc.complexityBlur;
     dst->rc.bEnableSlowFirstPass = src->rc.bEnableSlowFirstPass;
@@ -2813,8 +2833,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     else
         dst->rc.zones = NULL;
 
-    if (src->rc.lambdaFileName) dst->rc.lambdaFileName = strdup(src->rc.lambdaFileName);
-    else dst->rc.lambdaFileName = NULL;
+    copy_str(&dst->rc.lambdaFileName, src->rc.lambdaFileName);
     dst->rc.bStrictCbr = src->rc.bStrictCbr;
     dst->rc.qgSize = src->rc.qgSize;
     dst->rc.bEnableGrain = src->rc.bEnableGrain;
@@ -2845,8 +2864,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->vui.defDispWinRightOffset = src->vui.defDispWinRightOffset;
     dst->vui.defDispWinTopOffset = src->vui.defDispWinTopOffset;
 
-    if (src->masteringDisplayColorVolume) dst->masteringDisplayColorVolume=strdup( src->masteringDisplayColorVolume);
-    else dst->masteringDisplayColorVolume = NULL;
+    copy_str(&dst->masteringDisplayColorVolume, src->masteringDisplayColorVolume);
     dst->maxLuma = src->maxLuma;
     dst->minLuma = src->minLuma;
     dst->bEmitCLL = src->bEmitCLL;
@@ -2879,8 +2897,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->analysisSaveReuseLevel = src->analysisSaveReuseLevel;
     dst->analysisLoadReuseLevel = src->analysisLoadReuseLevel;
     dst->bLimitSAO = src->bLimitSAO;
-    if (src->toneMapFile) dst->toneMapFile = strdup(src->toneMapFile);
-    else dst->toneMapFile = NULL;
+    copy_str(&dst->toneMapFile, src->toneMapFile);
     dst->bDhdr10opt = src->bDhdr10opt;
     dst->bCTUInfo = src->bCTUInfo;
     dst->bUseRcStats = src->bUseRcStats;
@@ -2902,10 +2919,8 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->vbvEndFrameAdjust = src->vbvEndFrameAdjust;
     dst->bAnalysisType = src->bAnalysisType;
     dst->bCopyPicToFrame = src->bCopyPicToFrame;
-    if (src->analysisSave) dst->analysisSave=strdup(src->analysisSave);
-    else dst->analysisSave = NULL;
-    if (src->analysisLoad) dst->analysisLoad=strdup(src->analysisLoad);
-    else dst->analysisLoad = NULL;
+    copy_str(&dst->analysisSave, src->analysisSave);
+    copy_str(&dst->analysisLoad, src->analysisLoad);
     dst->gopLookahead = src->gopLookahead;
     dst->radl = src->radl;
     dst->selectiveSAO = src->selectiveSAO;
@@ -2915,8 +2930,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->bSingleSeiNal = src->bSingleSeiNal;
     dst->chunkStart = src->chunkStart;
     dst->chunkEnd = src->chunkEnd;
-    if (src->naluFile) dst->naluFile=strdup(src->naluFile);
-    else dst->naluFile = NULL;
+    copy_str(&dst->naluFile, src->naluFile);
     dst->scaleFactor = src->scaleFactor;
     dst->ctuDistortionRefine = src->ctuDistortionRefine;
     dst->bEnableHRDConcatFlag = src->bEnableHRDConcatFlag;
@@ -2954,8 +2968,7 @@ void x265_copy_params(x265_param* dst, x265_param* src)
     dst->bEnableSCC = src->bEnableSCC;
 #endif
 
-    if (src->videoSignalTypePreset) dst->videoSignalTypePreset = strdup(src->videoSignalTypePreset);
-    else dst->videoSignalTypePreset = NULL;
+    copy_str(&dst->videoSignalTypePreset, src->videoSignalTypePreset);
 #ifdef SVT_HEVC
     memcpy(dst->svtHevcParam, src->svtHevcParam, sizeof(EB_H265_ENC_CONFIGURATION));
 #endif
diff --git a/source/encoder/api.cpp b/source/encoder/api.cpp
index 2a96c2044..bb2dc6686 100644
--- a/source/encoder/api.cpp
+++ b/source/encoder/api.cpp
@@ -204,11 +204,12 @@ x265_encoder *x265_encoder_open(x265_param *p)
         }
     }
 
-    memcpy(zoneParam, param, sizeof(x265_param));
+    x265_copy_params(zoneParam, param);
     for (int i = 0; i < param->rc.zonefileCount; i++)
     {
         encoder->configureZone(zoneParam, param->rc.zones[i].zoneParam);
     }
+    PARAM_NS::x265_param_free(zoneParam);
 
     /* Try to open CSV file handle */
     if (encoder->m_param->csvfn)
diff --git a/source/encoder/encoder.cpp b/source/encoder/encoder.cpp
index e7dd30fa7..cab472614 100644
--- a/source/encoder/encoder.cpp
+++ b/source/encoder/encoder.cpp
@@ -982,18 +982,6 @@ void Encoder::destroy()
         if (m_param->csvfpt)
             fclose(m_param->csvfpt);
         /* release string arguments that were strdup'd */
-        free((char*)m_param->rc.lambdaFileName);
-        free((char*)m_param->rc.statFileName);
-        free((char*)m_param->rc.sharedMemName);
-        free((char*)m_param->analysisReuseFileName);
-        free((char*)m_param->scalingLists);
-        free((char*)m_param->csvfn);
-        free((char*)m_param->numaPools);
-        free((char*)m_param->masteringDisplayColorVolume);
-        free((char*)m_param->toneMapFile);
-        free((char*)m_param->analysisSave);
-        free((char*)m_param->analysisLoad);
-        free((char*)m_param->videoSignalTypePreset);
         PARAM_NS::x265_param_free(m_param);
     }
 }
@@ -1748,11 +1736,20 @@ int Encoder::encode(const x265_picture* pic_in, x265_picture** pic_out)
         }
         copyUserSEIMessages(inFrame[0], inputPic[0]);
 
-        /*Copy Dolby Vision RPU from inputPic to frame*/
+        /* Copy Dolby Vision RPU from inputPic to frame. */
+        if (inFrame[0]->m_rpu.payload && inFrame[0]->m_rpu.payloadSize < inputPic[0]->rpu.payloadSize)
+        {
+            delete[] inFrame[0]->m_rpu.payload;
+            inFrame[0]->m_rpu.payload = NULL;
+        }
+
         if (inputPic[0]->rpu.payloadSize)
         {
+            if (inFrame[0]->m_rpu.payload == NULL)
+            {
+                inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
+            }
             inFrame[0]->m_rpu.payloadSize = inputPic[0]->rpu.payloadSize;
-            inFrame[0]->m_rpu.payload = new uint8_t[inputPic[0]->rpu.payloadSize];
             memcpy(inFrame[0]->m_rpu.payload, inputPic[0]->rpu.payload, inputPic[0]->rpu.payloadSize);
         }
 
@@ -3806,7 +3803,7 @@ void Encoder::configureZone(x265_param *p, x265_param *zone)
         }
         p->radl = zone->radl;
     }
-    memcpy(zone, p, sizeof(x265_param));
+    x265_copy_params(zone, p);
 }
 
 void Encoder::configureDolbyVisionParams(x265_param* p)
diff --git a/source/encoder/framefilter.cpp b/source/encoder/framefilter.cpp
index 344ac738d..ce6e59ab6 100644
--- a/source/encoder/framefilter.cpp
+++ b/source/encoder/framefilter.cpp
@@ -162,11 +162,8 @@ void FrameFilter::destroy()
 
     if (m_parallelFilter)
     {
-        if (m_useSao)
-        {
-            for(int row = 0; row < m_numRows; row++)
-                m_parallelFilter[row].m_sao.destroy((row == 0 ? 1 : 0));
-        }
+        for(int row = 0; row < m_numRows; row++)
+            m_parallelFilter[row].m_sao.destroy((row == 0 ? 1 : 0));
 
         delete[] m_parallelFilter;
         m_parallelFilter = NULL;
diff --git a/source/encoder/slicetype.cpp b/source/encoder/slicetype.cpp
index 8bbac8244..046cf1596 100644
--- a/source/encoder/slicetype.cpp
+++ b/source/encoder/slicetype.cpp
@@ -1165,6 +1165,12 @@ void Lookahead::destroy()
         delete curFrame;
     }
 
+    X265_FREE(m_accHistDiffRunningAvgCb[0]);
+    X265_FREE(m_accHistDiffRunningAvgCb);
+    X265_FREE(m_accHistDiffRunningAvgCr[0]);
+    X265_FREE(m_accHistDiffRunningAvgCr);
+    X265_FREE(m_accHistDiffRunningAvg[0]);
+    X265_FREE(m_accHistDiffRunningAvg);
     X265_FREE(m_scratch);
     delete [] m_tld;
     if (m_param->lookaheadThreads > 0)
-- 
2.39.3 (Apple Git-146)

